name: "[Development] Deployment: Build image and deploy to AWS"

on:
  push:
    branches: [ dev ]

env:
  AWS_HOST: ${{ secrets.AWS_INSTANCE_DNS }}
  DB_NAME: ${{ secrets.MYSQL_DATABASE }}
  DB_USER: ${{ secrets.MYSQL_USERNAME }}
  DB_PASS: ${{ secrets.MYSQL_PASSWORD }}
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

jobs:
  docker-backend:
    name: "Build and push backend image to Dockerhub"
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2
      -
        name: setup config.yml for container
        run: |-

          echo 'app:' > ./backend/configs/config.yaml
          echo "  port: 1323" >> ./backend/configs/config.yaml

          echo 'mysql:' >> ./backend/configs/config.yaml
          echo "  host: $AWS_HOST" >> ./backend/configs/config.yaml
          echo '  port: 3306' >> ./backend/configs/config.yaml
          echo "  username: \"$DB_USER\"" >> ./backend/configs/config.yaml
          echo "  password: \"$DB_PASS\"" >> ./backend/configs/config.yaml
          echo "  db_name: \"$DB_NAME\"" >> ./backend/configs/config.yaml
          echo "  net: tcp" >> ./backend/configs/config.yaml
          
          echo "smtp:" >> ./backend/configs/config.yaml
          echo "  host: $SMTP_HOST" >> ./backend/configs/config.yaml
          echo "  port: $SMTP_PORT" >> ./backend/configs/config.yaml

          echo "email:" >> ./backend/configs/config.yaml
          echo "  host: $SMTP_EMAIL" >> ./backend/configs/config.yaml
          echo "  port: $SMTP_PASSWORD" >> ./backend/configs/config.yaml
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ format('{0}/zinusoidal-backend:latest', secrets.DOCKER_USERNAME )}}
  docker-frontend:
    name: "Build and push frontend image to Dockerhub"
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2
      -
        name: Get in to frontend folder
        run: |-
          cd frontend
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ format('{0}/zinusoidal-frontend:latest', secrets.DOCKER_USERNAME ) }}
  migration-db:
    name: "Migrate database in VM"
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2
      -
        name: Install golang-migrate
        run: |-
          curl -s https://packagecloud.io/install/repositories/golang-migrate/migrate/script.deb.sh | sudo bash
          sudo apt-get update
          sudo apt-get install -y migrate
      -
        name: Migrate database
        run: |-
          migrate -path ./database/migrations -database "mysql://$DB_USER:$DB_PASS@tcp($AWS_HOST:3306)/$DB_NAME" up
      
  push-to-vm:
    name: "Push and deploy to VM"
    needs: 
      - docker-backend
      - docker-frontend
    runs-on: ubuntu-latest

    steps:
      -
        name: Create docker-compose and run on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_INSTANCE_DNS }}
          username: ${{ secrets.AWS_INSTANCE_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            echo "version: \"2\"" > docker-compose.yml
            echo "services:" >> docker-compose.yml
            echo "  web:" >> docker-compose.yml
            echo "    image: kirkpig/zinusoidal-frontend:latest" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"80:80\"" >> docker-compose.yml
            echo "  logic:" >> docker-compose.yml
            echo "    image: kirkpig/zinusoidal-backend:latest" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"1323:1323\"" >> docker-compose.yml

            sudo docker-compose down
            sudo docker container prune --force
            sudo docker image prune -a --force
            sudo docker-compose up -d
