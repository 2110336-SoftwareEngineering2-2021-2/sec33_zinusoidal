basePath: /
definitions:
  appointment.AppointmentRequest:
    properties:
      appointment:
        $ref: '#/definitions/model.Appointment'
      date:
        type: string
      providerId:
        type: string
    required:
    - date
    - providerId
    type: object
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  auth.LoginResponse:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      profile_image:
        type: string
      token:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  chat.BlockRequest:
    properties:
      blockedUserId:
        type: string
    required:
    - blockedUserId
    type: object
  chat.SendMessageRequest:
    properties:
      message:
        type: string
      receiverId:
        type: string
    required:
    - receiverId
    type: object
  model.Appointment:
    properties:
      appointmentList:
        items:
          $ref: '#/definitions/model.AppointmentInfo'
        type: array
      information:
        items:
          type: string
        type: array
      value:
        items:
          type: string
        type: array
    type: object
  model.AppointmentInfo:
    properties:
      appointmentId:
        type: string
      fortuneType:
        type: string
      price:
        type: integer
      time:
        items:
          type: string
        type: array
    type: object
  model.Fortune:
    properties:
      fortuneType:
        type: string
      price:
        type: integer
    type: object
  model.WorkSchedule:
    properties:
      day:
        type: string
      timeList:
        items:
          items:
            type: string
          type: array
        type: array
    type: object
  profile.CustomerProfile:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      profilePicUrl:
        type: string
      userId:
        type: string
      username:
        type: string
    type: object
  profile.PasswordEditRequest:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  profile.ProviderProfile:
    properties:
      biography:
        type: string
      bookedService:
        items:
          type: string
        type: array
      email:
        type: string
      firstName:
        type: string
      fortuneList:
        items:
          $ref: '#/definitions/model.Fortune'
        type: array
      lastName:
        type: string
      maxPrice:
        type: integer
      minPrice:
        type: integer
      profilePicUrl:
        type: string
      rating:
        type: number
      userId:
        type: string
      username:
        type: string
      workSchedule:
        items:
          $ref: '#/definitions/model.WorkSchedule'
        type: array
    type: object
  review.ProviderReview:
    properties:
      reviewList:
        items:
          $ref: '#/definitions/review_repo.ReviewItem'
        type: array
    type: object
  review_repo.ReviewItem:
    properties:
      name:
        type: string
      profilePic:
        type: string
      score:
        type: integer
      text:
        type: string
    type: object
  schedule.Appointment:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      time:
        items:
          type: string
        type: array
      topic:
        type: string
    type: object
  schedule.ScheduleDto:
    properties:
      available_date:
        items:
          $ref: '#/definitions/schedule.WorkingDay'
        type: array
      not_available_date:
        items:
          type: integer
        type: array
    type: object
  schedule.WorkingDay:
    properties:
      date:
        type: integer
      timeList:
        items:
          items:
            type: string
          type: array
        type: array
    type: object
  search.LandingPageInfo:
    properties:
      totalCustomer:
        type: integer
      totalFortuneService:
        type: integer
      totalProvider:
        type: integer
    type: object
host: zinusoidal-fortune.kirkpig.dev
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is API documentation for zinusoidal-fortune.kirkpig.dev server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fortune168 API documentation
  version: "2.0"
paths:
  /api/fortune168/v1/all_services:
    get:
      consumes:
      - application/json
      description: Return array of search result if success
      operationId: GetAllServicesHandler
      produces:
      - application/json
      responses:
        "200":
          description: services
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
      summary: Get all services in platform
      tags:
      - search
  /api/fortune168/v1/available_schedule/{id}:
    post:
      consumes:
      - application/json
      description: See body for request details and uuid in param. Return calendar
        in format if success
      operationId: ScheduleHandler
      parameters:
      - in: formData
        name: month
        required: true
        type: integer
      - in: formData
        name: year
        required: true
        type: integer
      - description: uuid values
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schedule.ScheduleDto'
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: error logs
          schema:
            type: string
      summary: Get schedule in calendar's month format
      tags:
      - schedule
  /api/fortune168/v1/available_time/{id}:
    post:
      consumes:
      - application/json
      description: See body for request details and uuid in param. Return freetime
        in day format if success
      operationId: FreeTimeHandler
      parameters:
      - in: formData
        name: date
        required: true
        type: integer
      - in: formData
        name: month
        required: true
        type: integer
      - in: formData
        name: year
        required: true
        type: integer
      - description: uuid values
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: free time
          schema:
            items:
              type: string
            type: array
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: error logs
          schema:
            type: string
      summary: Get free time of this provider
      tags:
      - schedule
  /api/fortune168/v1/block:
    post:
      consumes:
      - application/json
      description: provider the id of person to be blocked
      operationId: BlockHandler
      parameters:
      - description: id of person to be blocked
        in: body
        name: BlockReq
        required: true
        schema:
          $ref: '#/definitions/chat.BlockRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to block user
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: block user from sending message to you
      tags:
      - chat
  /api/fortune168/v1/confirm_email/{key}:
    post:
      consumes:
      - application/json
      description: Send the key from confirmation email to activate
      operationId: ActivateEmailHandler
      parameters:
      - description: uuid values
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: email confirmed
          schema:
            type: string
        "400":
          description: invalid key
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: Use the key in the confirmation email to activate
      tags:
      - auth
  /api/fortune168/v1/customer/{id}:
    get:
      consumes:
      - application/json
      description: send id to get customer profile
      operationId: GetCustomerProfileHandler
      parameters:
      - description: customer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.CustomerProfile'
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: 'error message, ex: customer not found'
          schema:
            type: string
      summary: Get customer profile
      tags:
      - profile
  /api/fortune168/v1/customer_register:
    post:
      consumes:
      - application/json
      description: See body for request details. Return message if registration is
        success. Also send the confirmation email
      operationId: CustomerRegisterHandler
      parameters:
      - in: formData
        name: citizenId
        type: string
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: firstName
        required: true
        type: string
      - in: formData
        name: lastName
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      - in: formData
        name: username
        required: true
        type: string
      - description: profile pic file
        in: formData
        name: profilePic
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: registration is not successful
          schema:
            type: string
      summary: Customer registeration and send confirmation email
      tags:
      - auth
  /api/fortune168/v1/delete_account:
    post:
      consumes:
      - application/json
      description: Just send the request to delete account. Note that this is a hard
        delete, no way to recover account later.
      operationId: DeleteAccountHandler
      parameters:
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to delete account
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid jwt token
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: Delete account for both customer and provider
      tags:
      - auth
  /api/fortune168/v1/landing_page_info:
    get:
      consumes:
      - application/json
      description: Return all info that in landing page if success
      operationId: GetLandingPageInfoHandler
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/search.LandingPageInfo'
        "500":
          description: error log
          schema:
            type: string
      summary: Get all info for landing page
      tags:
      - search
  /api/fortune168/v1/login:
    post:
      consumes:
      - application/json
      description: login by username and password, return jwt token
      operationId: LoginHandler
      parameters:
      - description: username and password for login
        in: body
        name: LoginReq
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: login by unsername and password
      tags:
      - auth
  /api/fortune168/v1/make_appointment:
    post:
      consumes:
      - application/json
      description: customer provider information about service they want and make
        request to provider
      operationId: MakeAppointmentHandler
      parameters:
      - description: Detail of services
        in: body
        name: AppointmentReq
        required: true
        schema:
          $ref: '#/definitions/appointment.AppointmentRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to make appointment,
          also this must be customer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt(must be customer)
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: Customer make appointment with provider
      tags:
      - appointment
  /api/fortune168/v1/my_schedule/{id}:
    post:
      consumes:
      - application/json
      description: See body for request details and uuid in param. Return calendar
        in day format if success
      operationId: MyScheduleHandler
      parameters:
      - in: formData
        name: date
        required: true
        type: integer
      - in: formData
        name: month
        required: true
        type: integer
      - in: formData
        name: year
        required: true
        type: integer
      - description: uuid values
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schedule.Appointment'
            type: array
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: error logs
          schema:
            type: string
      summary: Get schedule in calendar's day format
      tags:
      - schedule
  /api/fortune168/v1/password_edit:
    patch:
      consumes:
      - application/json
      description: send jwt token to verify, and re-enter password again
      operationId: EditPasswordHandler
      parameters:
      - description: customer id
        in: body
        name: PasswordEditReq
        required: true
        schema:
          $ref: '#/definitions/profile.PasswordEditRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to edit password
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Password Updated
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: 'error message, ex: customer not found'
          schema:
            type: string
      summary: edit password
      tags:
      - profile
  /api/fortune168/v1/provider/{id}:
    get:
      consumes:
      - application/json
      description: send id to get provider profile
      operationId: GetProviderProfileHandler
      parameters:
      - description: provider id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.ProviderProfile'
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: 'error message, ex: provider not found'
          schema:
            type: string
      summary: Get provider profile
      tags:
      - profile
  /api/fortune168/v1/provider_edit:
    patch:
      consumes:
      - application/json
      description: send jwt token to edit profile of provider
      operationId: EditProviderHandler
      parameters:
      - in: formData
        name: biography
        type: string
      - in: formData
        name: email
        type: string
      - in: formData
        name: firstName
        type: string
      - in: formData
        name: fortuneList
        type: string
      - in: formData
        name: lastName
        type: string
      - in: formData
        name: schedule
        type: string
      - in: formData
        name: workSchedule
        type: string
      - description: profile pic file
        in: formData
        name: profilePic
        type: file
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to edit profile
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.ProviderProfile'
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: edit provider profile
      tags:
      - profile
  /api/fortune168/v1/provider_register:
    post:
      consumes:
      - application/json
      description: See body for request details. Return message if registration is
        success and send confirmation email
      operationId: ProviderRegisterHandler
      parameters:
      - in: formData
        name: biography
        type: string
      - in: formData
        name: citizenId
        type: string
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: firstName
        required: true
        type: string
      - in: formData
        name: fortuneList
        type: string
      - in: formData
        name: lastName
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      - in: formData
        name: schedule
        type: string
      - in: formData
        name: username
        required: true
        type: string
      - in: formData
        name: workSchedule
        type: string
      - description: profile pic file
        in: formData
        name: profilePic
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: registration is not successful
          schema:
            type: string
      summary: Provider registeration and send confirmation email
      tags:
      - auth
  /api/fortune168/v1/response_appointment/{app_id}/{status}:
    post:
      consumes:
      - application/json
      description: provider can accept and reject the request. The status can be complete
        after the service and reviewed if customer submit review
      operationId: ResponseAppointmentHandler
      parameters:
      - description: appointment_id
        in: path
        name: app_id
        required: true
        type: string
      - description: status to be changed, 1 reject, 2 accepted, 3 complete, 4 reviewed
        enum:
        - "1"
        - "2"
        - "3"
        - "4"
        in: path
        name: status
        required: true
        type: string
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to change status, also
          this must be customer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: change status of request
      tags:
      - appointment
  /api/fortune168/v1/review:
    post:
      consumes:
      - application/json
      description: See body for request details. Return message if review is success
      operationId: ReviewRatingHandler
      parameters:
      - in: formData
        name: appointmentId
        type: string
      - in: formData
        name: score
        type: integer
      - in: formData
        name: text
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: error logs
          schema:
            type: string
      summary: Post review for this appointment
      tags:
      - review
  /api/fortune168/v1/review/{user_id}:
    get:
      consumes:
      - application/json
      description: Enter provider's provider in param. Return all review of this provider
      operationId: GetReviewHandler
      parameters:
      - description: uuid values
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/review.ProviderReview'
        "400":
          description: invalid request
          schema:
            type: string
      summary: Get Provider review
      tags:
      - review
  /api/fortune168/v1/search:
    post:
      consumes:
      - application/json
      description: See body for request details. Return array of search result if
        success
      operationId: SearchHandler
      parameters:
      - in: formData
        items:
          type: string
        name: fortuneType
        type: array
      - in: formData
        name: keyword
        type: string
      - in: formData
        name: maxPrice
        type: number
      - in: formData
        name: maxRating
        type: number
      - in: formData
        name: minPrice
        type: number
      - in: formData
        name: minRating
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profile.ProviderProfile'
            type: array
        "400":
          description: invalid request
          schema:
            type: string
      summary: Search for provider by search argument
      tags:
      - search
  /api/fortune168/v1/send_message:
    post:
      consumes:
      - application/json
      description: if message is not null, the endpoint will send message, otherwise
        create new chatroom(if not exist)
      operationId: SendMessageHandler
      parameters:
      - description: id to person who will receive message and text
        in: body
        name: SendMessageReq
        required: true
        schema:
          $ref: '#/definitions/chat.SendMessageRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to send message
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: send message to other users
      tags:
      - chat
  /api/fortune168/v1/test:
    get:
      consumes:
      - application/json
      description: Dummy function for testing, will return the time at midnigth of
        2014-05-22
      operationId: TestHandler
      produces:
      - application/json
      responses:
        "200":
          description: "2014-05-22T00:00:00Z"
          schema:
            type: string
        "400":
          description: should not happened?
          schema:
            type: string
      summary: Dummy function, will return the time at midnigth of 2014-05-22
  /api/fortune168/v1/unblock:
    post:
      consumes:
      - application/json
      description: unblock user to allow message from them
      operationId: UnBlockHandler
      parameters:
      - description: id of person to be unblocked
        in: body
        name: UnBlockReq
        required: true
        schema:
          $ref: '#/definitions/chat.BlockRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to unblock user
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: unblock user
      tags:
      - chat
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
