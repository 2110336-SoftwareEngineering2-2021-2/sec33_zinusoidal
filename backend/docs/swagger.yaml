basePath: /
definitions:
  appointment.AppointmentRequest:
    properties:
      appointment:
        $ref: '#/definitions/model.Appointment'
      date:
        type: string
      providerId:
        type: string
    required:
    - date
    - providerId
    type: object
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  auth.LoginResponse:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      profile_image:
        type: string
      token:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  chat.BlockRequest:
    properties:
      blockedUserId:
        type: string
    required:
    - blockedUserId
    type: object
  chat.SendMessageRequest:
    properties:
      message:
        type: string
      receiverId:
        type: string
    required:
    - receiverId
    type: object
  model.Appointment:
    properties:
      appointmentList:
        items:
          $ref: '#/definitions/model.AppointmentInfo'
        type: array
      information:
        items:
          type: string
        type: array
      value:
        items:
          type: string
        type: array
    type: object
  model.AppointmentInfo:
    properties:
      appointmentId:
        type: string
      fortuneType:
        type: string
      price:
        type: integer
      time:
        items:
          type: string
        type: array
    type: object
host: localhost:1323
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /api/fortune168/v1/block:
    post:
      consumes:
      - application/json
      description: provider the id of person to be blocked
      operationId: BlockHandler
      parameters:
      - description: id of person to be blocked
        in: body
        name: BlockReq
        required: true
        schema:
          $ref: '#/definitions/chat.BlockRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to send message
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: block user from sending message to you
      tags:
      - chat
  /api/fortune168/v1/confirm_email/{key}:
    post:
      consumes:
      - application/json
      description: send the key from confirmation email to activate
      operationId: ActivateEmailHandler
      parameters:
      - description: uuid values
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: email confirmed
          schema:
            type: string
        "400":
          description: invalid key
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: use the key in the confirmation email to activate
      tags:
      - auth
  /api/fortune168/v1/customer_register:
    post:
      consumes:
      - application/json
      description: See body for request details. Return message if registration is
        success. Also send the confirmation email
      operationId: CustomerRegisterHandler
      parameters:
      - in: formData
        name: citizenId
        type: string
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: firstName
        required: true
        type: string
      - in: formData
        name: lastName
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      - in: formData
        name: username
        required: true
        type: string
      - description: profile pic file
        in: formData
        name: profilePic
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: registration is not successful
          schema:
            type: string
      summary: customer registeration and send confirmation email
      tags:
      - auth
  /api/fortune168/v1/delete_account:
    post:
      consumes:
      - application/json
      description: just send the request to delete account. Note that this is a hard
        delete, no way to recover account later.
      operationId: DeleteAccountHandler
      parameters:
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to send message
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid jwt token
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: Delete account for both customer and provider
      tags:
      - auth
  /api/fortune168/v1/login:
    post:
      consumes:
      - application/json
      description: login by username and password, return jwt token
      operationId: LoginHandler
      parameters:
      - description: username and password for login
        in: body
        name: LoginReq
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: login by unsername and password
      tags:
      - auth
  /api/fortune168/v1/make_appointment:
    post:
      consumes:
      - application/json
      description: customer provider information about service they want and make
        request to provider
      operationId: MakeAppointmentHandler
      parameters:
      - description: Detail of services
        in: body
        name: AppointmentReq
        required: true
        schema:
          $ref: '#/definitions/appointment.AppointmentRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to send message, also
          this must be customer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt(must be customer)
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: Customer make appointment with provider
      tags:
      - appointment
  /api/fortune168/v1/provider_register:
    post:
      consumes:
      - application/json
      description: See body for request details. Return message if registration is
        success and send confirmation email
      operationId: ProviderRegisterHandler
      parameters:
      - in: formData
        name: biography
        type: string
      - in: formData
        name: citizenId
        type: string
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: firstName
        required: true
        type: string
      - in: formData
        name: fortuneList
        type: string
      - in: formData
        name: lastName
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      - in: formData
        name: schedule
        type: string
      - in: formData
        name: username
        required: true
        type: string
      - in: formData
        name: workSchedule
        type: string
      - description: profile pic file
        in: formData
        name: profilePic
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: registration is not successful
          schema:
            type: string
      summary: provider registeration and send confirmation email
      tags:
      - auth
  /api/fortune168/v1/response_appointment/{app_id}/{status}:
    post:
      consumes:
      - application/json
      description: provider can accept and reject the request. The status can be complete
        after the service and reviewed if customer submit review
      operationId: ResponseAppointmentHandler
      parameters:
      - description: appointment_id
        in: path
        name: app_id
        required: true
        type: string
      - description: status to be changed
        in: path
        name: status
        required: true
        type: string
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to send message, also
          this must be customer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: change status of request
      tags:
      - appointment
  /api/fortune168/v1/send_message:
    post:
      consumes:
      - application/json
      description: if message is not null, the endpoint will send message, otherwise
        create new chatroom(if not exist)
      operationId: SendMessageHandler
      parameters:
      - description: id to person who will receive message and text
        in: body
        name: SendMessageReq
        required: true
        schema:
          $ref: '#/definitions/chat.SendMessageRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to send message
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: send message to other users
      tags:
      - chat
  /api/fortune168/v1/unblock:
    post:
      consumes:
      - application/json
      description: unblock user to allow message from them
      operationId: UnBlockHandler
      parameters:
      - description: id of person to be blocked
        in: body
        name: UnBlockReq
        required: true
        schema:
          $ref: '#/definitions/chat.BlockRequest'
      - default: Bearer <Add access token here>
        description: Send token if log-in, to check authority to send message
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: invalid request or invalid jwt
          schema:
            type: string
        "500":
          description: error message
          schema:
            type: string
      summary: unblock user
      tags:
      - chat
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
